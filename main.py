from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.types.web_app_info import WebAppInfo
from config import BOT_TOKEN, AMPLITUDE_API_KEY, AMPLITUDE_API_URL
import db
import json
import aiohttp




bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

async def send_amplitude_event(user_id, event_type, event_properties):
    headers = {
        'Content-Type': 'application/json',
        'Accept': '*/*'
    }

    data = {
        "api_key": AMPLITUDE_API_KEY,
        "events": [{
            "user_id": user_id,
            "event_type": event_type,
            "event_properties": event_properties
        }]
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(AMPLITUDE_API_URL, headers=headers, json=data) as response:
            if response.status == 200:
                print("Success:", await response.json())
            else:
                print("Error:", await response.text())

async def handle_character_choice(user_id, character_choice):
    event_type = 'character_choice'
    event_properties = {
        'character_choice': character_choice
    }
    await send_amplitude_event(user_id, event_type, event_properties)



@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    user_id = message.from_id
    name = message.from_user.first_name
    surname = message.from_user.last_name
    username = message.from_user.username

    if  not db.check_user(user_id):
        res = db.insert_user(user_id, username, name, surname)
        if res:
            event_type = 'user_registration'
            event_properties = {
                'user_id': user_id,
                'name': name,
                'surname': surname,
                'username': username
            }
            await send_amplitude_event(user_id, event_type, event_properties)
            await bot.send_message(message.from_user.id,"""
üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –æ–ø—ã—Ç–∞!
ü§ñ –Ø –≤–∞—à –≤–µ—Ä–Ω—ã–π —Å–ø—É—Ç–Ω–∏–∫, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–¥–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. –ú–æ—è —Ü–µ–ª—å - –æ–±–µ—Å–ø–µ—á–∏—Ç—å –≤–∞—Å –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ–º.
üé≠ –†–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–π—Ç–µ —Å–æ –º–Ω–æ–π, –∫–∞–∫ —Å –∂–∏–≤—ã–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º. –Ø —É–º–µ—é –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥–∏ –∏ –¥–∞–∂–µ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º.
üåê –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–æ–≤—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã –æ–±—â–µ–Ω–∏—è —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–≤ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –º–∏—Ä–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏!
üí¨ –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ—Å—å–±—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è. –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –≤–∞—à–µ –≤—Ä–µ–º—è —Å –±–æ—Ç–æ–º –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–º –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º.
""")
            await bot.send_message(message.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ", reply_markup=web_app_keyboard())
        else:
            await bot.send_message(message.from_user.id,"–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!")
    else:
        await bot.send_message(message.from_user.id, """
–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å 
–ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.
–ò–Ω–∞—á–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º """, reply_markup=web_app_keyboard())


@dp.message_handler(commands = ['menu'])
async def change_character(message: types.Message):
    await bot.send_message(message.from_user.id, "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", reply_markup=web_app_keyboard())



def web_app_keyboard():
    keyboard = ReplyKeyboardMarkup(
                resize_keyboard=True, one_time_keyboard=True)
            
    accept_button = KeyboardButton("–í—ã–±—Ä–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", web_app=WebAppInfo(url='https://egor-s-n.github.io/site/'))
    keyboard.add(accept_button)

    return keyboard

@dp.message_handler(content_types=['web_app_data'])
async def web_app_answer(messasge: types.Message):
    res = json.loads(messasge.web_app_data.data)
    character = db.get_character(int(res["value"]))

    event_type = 'choose_character'
    event_properties = {
               'choisen_character': character[0],
            }
    await send_amplitude_event(messasge.from_user.id, event_type, event_properties)




    db.update_user_character(messasge.from_user.id, character[0])
    await messasge.answer("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", reply_markup=ReplyKeyboardRemove())
    await messasge.answer(character[2], reply_markup=ReplyKeyboardRemove())


@dp.message_handler(content_types='text')
async def text_processing(message: types.Message):
    character = db.get_user(message.from_user.id)[5]
    if character != None:

        #–Ω–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –≤ –ë–î 
        id_req = db.create_req_res(message.from_user.id, character)

        #Ampitude –Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        event_type = 'user_send_request'
        event_properties = {
                'send_request': 1,
                }
        await send_amplitude_event(message.from_user.id, event_type, event_properties)
        
        #–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
        db.set_request(id_req, message.text)

        # –ó–∞–ø—Ä–æ—Å –≤ Ai 
        req = f"instructions: {db.get_instruction(message.from_user.id)}. User message: {message.text}"
        messages = [
            {"role": "user", "content": req}
        ]
        #–ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Ai
        response_data = await fetch_completion(messages)
        response_text = response_data['choices'][0]['message']['content']
        # –æ—Ç–ø—Ä–∞–≤–∫–∞ Amplitude –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ 
        event_type = 'get-response'
        event_properties = {
                'response': 1,
                }
        await send_amplitude_event(message.from_user.id, event_type, event_properties)

        #–û—Ç–≤–µ—Ç –±–æ—Ç–∞ 
        await bot.send_message(message.from_user.id, response_text, reply_markup=ReplyKeyboardRemove())

        #–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ Ai —Ä—è–¥–æ–º —Å –∑–∞–ø—Ä–æ—Å–æ–º 
        db.set_response(id_req, response_text)

        # Amplitude –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
        event_type = 'send_answer'
        event_properties = {
                'answer': 1,
                }
        # Amplitude –Ω–∞ —Ç–æ, —á—Ç–æ –æ—Ç–≤–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω 
        await send_amplitude_event(message.from_user.id, event_type, event_properties)
    else:
        await bot.send_message(message.from_user.id, "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", reply_markup=web_app_keyboard())


async def fetch_completion(message):
    endpoint = 'http://95.217.14.178:8080/candidates_openai/gpt'
    headers = {
        'accept': 'application/json',
        'Content-Type': 'application/json'
    }
    data = {
        'model': 'gpt-3.5-turbo',
        'messages': message,
    }
    async with aiohttp.ClientSession() as session:
        async with session.post(endpoint, headers=headers, json=data) as response:
            return await response.json()


def main():
    db.create_database()
    db.create_tables()
    executor.start_polling(dp, skip_updates=True)

if __name__ == "__main__":
    main()
# —Ç–∞–±–ª–∏—Ü–∞ –ë–î (id, user_id,character,  request, response)   -------------
#—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥
# —Ä—è–¥–æ–º —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
# –¥–ª—è –µ–±–∞–Ω–æ–π —Ö—É–π–Ω–∏ –Ω–∞ —Å–∞–π—Ç–µ –º–æ–∂–Ω–æ —Ä–∞–∑–±–∏—Ç—å –Ω–∞ –¥–≤–∞ event –∏ –ø—Ä–æ—Å—Ç–æ —É—Å–ª–æ–≤–∏–µ –¥–æ–±–∞–≤–∏—Ç—å, –∞ –Ω–∞ —Ö—É–π–Ω–µ –ø–æ—Ç–æ–º —Å–æ–µ–¥–∏–Ω–∏—Ç—å 
# –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ—Å–∫—Ä–∏–ø—Ç –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∏–æ –∏ —ç–Ω—à—Ç–µ–π–Ω–∞ –≤ –¨–î –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ -----------------